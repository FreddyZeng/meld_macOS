// SPDX-FileCopyrightText: 2023 Ren√© de Hesselle <dehesselle@web.de>
//
// SPDX-License-Identifier: GPL-2.0-or-later

#include <CoreFoundation/CoreFoundation.h>
#include <Python.h>
#include <mach-o/dyld.h>
#include <stdio.h>
#include <stdlib.h>

#include <codecvt>
#include <sstream>
#include <string>

#include "iniparser.hpp"  // (c) 2015 by Borovik Alexey. Licensed under MIT.
                          // https://github.com/Lek-sys/LeksysINI
#include "meld.h"          // generated by 'xxd -i meld > meld.h'

// https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html
static const std::string BUNDLE_IDENTIFIER = "org.gnome.Meld";
static const std::string SETTINGS_DIR = std::string(getenv("HOME")) +
                                        "/Library/Application Support/" +
                                        BUNDLE_IDENTIFIER;
static const std::string MELD_INI = SETTINGS_DIR + "/meldapp.ini";

std::string get_program_dir() {
  std::string result;

  uint32_t size = PATH_MAX + 1;
  char path[size];

  if (_NSGetExecutablePath(path, &size) == 0) {
    result = result.assign(path).substr(0, result.rfind("/"));
  }

  return result;
}

void setenv(const std::string &name, const std::string &value) {
  setenv(name.c_str(), value.c_str(), 1);
}

static void setup_environment() {
  std::string program_dir = get_program_dir();
  std::string contents_dir;
  contents_dir.assign(program_dir).append("/..");  // <TheApp.app>/Contents
  auto resources_dir = contents_dir + "/Resources";
  auto etc_dir = resources_dir + "/etc";
  auto bin_dir = resources_dir + "/bin";
  auto lib_dir = resources_dir + "/lib";
  auto share_dir = resources_dir + "/share";

  const std::string cache_dir =
      std::string(getenv("HOME")) + "/Library/Caches/" + BUNDLE_IDENTIFIER;

  // XDG
  // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
  setenv("XDG_DATA_HOME", SETTINGS_DIR + "/share");
  setenv("XDG_DATA_DIRS", share_dir);
  setenv("XDG_CONFIG_HOME", SETTINGS_DIR);
  setenv("XDG_CONFIG_DIRS", etc_dir + "/xdg");
  setenv("XDG_CACHE_HOME", cache_dir);
  setenv("XDG_RUNTIME_DIR", "/tmp");  // fallback, we don't have anything better

  // GTK
  // https://developer.gnome.org/gtk3/stable/gtk-running.html
  setenv("GTK_EXE_PREFIX", resources_dir);
  setenv("GTK_DATA_PREFIX", resources_dir);

  // GDK
  setenv("GDK_PIXBUF_MODULE_FILE",
         lib_dir + "/gdk-pixbuf-2.0/2.10.0/loaders.cache");

  // fontconfig
  setenv("FONTCONFIG_PATH", etc_dir + "/fonts");

  // GIO
  setenv("GIO_MODULE_DIR", lib_dir + "/gio/modules");

  // GObject Introspection Repository
  setenv("GI_TYPELIB_PATH", lib_dir + "/girepository-1.0");

  // gettext
  // This variable is actually only evaluated by gettext CLI tools, but because
  // of its familiarity we make Meld evaluate it to configure gettext.
  setenv("TEXTDOMAINDIR", share_dir + "/locale");

  // Python site-packages
  setenv("PYTHONPATH",
         (std::stringstream()
          << program_dir << "/../Resources/lib/python" << PY_MAJOR_VERSION
          << "." << PY_MINOR_VERSION << "/site-packages"
          << ":" << program_dir
          << "/../Frameworks/Python.framework/Versions/Current/lib/python"
          << PY_MAJOR_VERSION << "." << PY_MINOR_VERSION << "/site-packages")
             .str());

  // Python cache files (*.pyc)
  setenv("PYTHONPYCACHEPREFIX", cache_dir);

  // Python bindings for Enchant spellchecker
  setenv("PYENCHANT_LIBRARY_PATH", lib_dir + "/libenchant-2.2.dylib");

  // set PATH
  setenv("PATH", std::string(getenv("PATH")) + ":" + bin_dir);

  // set GUI language
  // https://www.gnu.org/software/gettext/manual/html_node/Locale-Environment-Variables.html
  if (getenv("LANG") == nullptr) {
    CFLocaleRef cflocale = CFLocaleCopyCurrent();
    CFStringRef value =
        (CFStringRef)CFLocaleGetValue(cflocale, kCFLocaleIdentifier);
    char locale[32];
    CFStringGetCString(value, locale, 32, kCFStringEncodingUTF8);
    CFRelease(cflocale);
    setenv("LANG", std::string(locale).append(".UTF-8"));
  }

  // an (optional) ini file can be used to set/override environment variables
  INI::File ini;
  if (ini.Load(SETTINGS_DIR + "/meldapp.ini")) {
    auto section = ini.GetSection("environment");
    if (section) {
      for (auto it = section->ValuesBegin(); it != section->ValuesEnd(); ++it) {
        setenv(it->first, it->second.AsString());
      }
    }
  }
}

size_t get_entry_count(const std::string &section_name) {
  INI::File ini;

  if (ini.Load(MELD_INI)) {
    auto section = ini.GetSection(section_name);

    if (section)
      return section->ValuesSize();
    else
      return 0;
  }

  return 0;
}

int main(int argc, char *argv[]) {
  int rc = 0;

  // ---------------------------------------------------------------------- init

  wchar_t **wargv = nullptr;
  {
    // convert all arguments from argv to wide char wargv
    size_t ini_argc = get_entry_count("arguments");
    wargv = new wchar_t *[argc + ini_argc];
    int i = 0;
    for (; i < argc; ++i) {
      wargv[i] = Py_DecodeLocale(argv[i], nullptr);
    }

    // append arguments from ini file to wargv
    if (ini_argc) {
      argc += ini_argc;
      INI::File ini;
      if (ini.Load(MELD_INI)) {
        auto section = ini.GetSection("arguments");

        if (section) {
          for (auto it = section->ValuesBegin(); it != section->ValuesEnd();
               ++it) {
            auto arg = Py_DecodeLocale(it->second.AsString().c_str(), nullptr);
            wargv[i++] = arg;
          }
        }
      }
    }
  }

  setup_environment();
  Py_Initialize();

  // ---------------------------------------------------------------- run Python

  if (argc > 1 and std::string(argv[1]) == "pythonshell") {
    // swap first with second argument
    auto argv1 = wargv[1];
    wargv[1] = wargv[0];
    wargv[0] = argv1;

    rc = Py_Main(argc - 1, &wargv[1]);  // run without "pythonshell" arg
  } else {                              // run Meld - this is the default
    PySys_SetArgv(argc, wargv);
    // 'meld' and 'meld_len' are defined in 'meld.h'
    std::string meld_str(reinterpret_cast<char const *>(meld), meld_len);
    rc = PyRun_SimpleString(meld_str.c_str());
  }

  // ------------------------------------------------------------------- cleanup

  Py_Finalize();

  for (int i = 0; i < argc; i++) {
    PyMem_RawFree(wargv[i]);
  }

  delete[] wargv;

  return rc;
}